# 接口设计规范

## 引言
本文档旨在为电商应用定义接口设计规范，确保接口的稳定性、易用性和一致性。

## 1. 接口设计原则
### 1.1 标准化
- 使用统一的接口命名规范。
- 接口返回统一的数据格式。

### 1.2 简洁性
- 接口设计应简洁明了，避免复杂和冗余。

### 1.3 可扩展性
- 接口设计应考虑未来可能的功能扩展。

### 1.4 安全性
- 接口应进行安全校验，防止非法访问。

### 1.5 一致性
- 接口返回错误码和消息应保持一致。

## 2. 接口命名规范
- 使用小写字母和下划线命名，如 `get_user_info`。

## 3. 接口返回数据格式
- 使用JSON格式返回数据。
- 返回数据结构应清晰，字段命名规范。

## 4. 接口请求参数
- 请求参数应使用GET或POST方法传输。
- GET方法请求参数应在URL中传递。
- POST方法请求参数应在请求体中传递。

## 5. 接口响应状态码
- 使用HTTP状态码表示响应状态。
- 200 OK：请求成功。
- 400 Bad Request：请求有误。
- 401 Unauthorized：未授权访问。
- 403 Forbidden：禁止访问。
- 404 Not Found：请求的资源不存在。
- 500 Internal Server Error：服务器内部错误。

## 6. 接口错误处理
- 接口返回错误时，应包含错误码和错误信息。
- 错误码应具有唯一性，便于前端识别和处理。

## 7. 接口示例
### 7.1 获取用户信息
- **URL**：/api/users/{userId}
- **方法**：GET
- **参数**：userId（用户ID）
- **响应**：
  ```json
  {
    "code": 200,
    "data": {
      "userId": "123456",
      "username": "user123",
      "email": "user@example.com",
      "nickname": "nickname",
      "avatar": "http://example.com/avatar.jpg"
    }
  }
  ```

### 7.2 创建订单
- **URL**：/api/orders
- **方法**：POST
- **请求体**：
  ```json
  {
    "userId": "123456",
    "items": [
      {
        "productId": "789012",
        "quantity": 1
      }
    ]
  }
  ```
- **响应**：
  ```json
  {
    "code": 200,
    "data": {
      "orderId": "987654",
      "orderStatus": "pending",
      "totalPrice": 100.00
    }
  }
  ```

## 8. 总结
本文档为电商应用的接口设计提供了规范，确保接口的稳定性和易用性。开发团队将遵循这些规范进行接口设计和实现。